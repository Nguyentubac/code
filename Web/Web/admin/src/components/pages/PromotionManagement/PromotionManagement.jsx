import React, { useEffect, useState } from "react";
import Swal from "sweetalert2";
import {
  getAllPromotions,
  createPromotion,
  updatePromotion,
  deletePromotion,
} from "../../../services/apiPromotion";
import styles from "./PromotionManagement.module.css";
import EditPromotionModal from "./EditPromotionModal";
export default function PromotionManagement() {
  const [promotions, setPromotions] = useState([]);
  const [form, setForm] = useState({
    code: "",
    description: "",
    discount: 0,
    validFrom: "",
    validTo: "",
    status: 1,
    minRideAmount: 0,
    maxUsage: 100,
  });
  const [showModal, setShowModal] = useState(false);
  const [isEdit, setIsEdit] = useState(false);
  const [editingId, setEditingId] = useState(null);

  const fetchPromotions = async () => {
    const data = await getAllPromotions();
    setPromotions(data);
  };

  useEffect(() => {
    fetchPromotions();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const openAddModal = () => {
    setIsEdit(false);
    setForm({
      code: "",
      description: "",
      discount: 0,
      validFrom: "",
      validTo: "",
      status: 1,
      minRideAmount: 0,
      maxUsage: 100,
    });
    setShowModal(true);
  };

  const openEditModal = (promo) => {
    setIsEdit(true);
    setEditingId(promo.id);
    setForm({
      id: promo.id, // ‚úÖ th√™m d√≤ng n√†y!
      code: promo.code,
      description: promo.description,
      discount: promo.discount,
      validFrom: promo.validFrom.slice(0, 10),
      validTo: promo.validTo.slice(0, 10),
      status: promo.status,
      minRideAmount: promo.minRideAmount,
      maxUsage: promo.maxUsage,
    });
    setShowModal(true);
  };

  const handleSubmit = async () => {
    try {
      if (isEdit) {
        await updatePromotion(form.id, form);
        Swal.fire("C·∫≠p nh·∫≠t th√†nh c√¥ng!", "", "success");
      } else {
        await createPromotion(form);
        Swal.fire("T·∫°o m√£ th√†nh c√¥ng!", "", "success");
      }
      setShowModal(false);
      fetchPromotions();
    } catch (err) {
      console.error(err);
      Swal.fire("L·ªói", "Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu", "error");
    }
  };

  const handleDelete = async (id) => {
    const confirm = await Swal.fire({
      title: "B·∫°n ch·∫Øc ch·∫Øn xo√°?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Xo√°",
      cancelButtonText: "H·ªßy",
    });
    if (confirm.isConfirmed) {
      await deletePromotion(id);
      fetchPromotions();
      Swal.fire("ƒê√£ xo√°", "", "success");
    }
  };

  return (
    <div className={styles.container}>
      <h2>üéÅ Qu·∫£n l√Ω m√£ gi·∫£m gi√°</h2>
      <button className={`${styles.actionBtn} ${styles.editBtn}`} onClick={openAddModal}>
        ‚ûï Th√™m m√£
      </button>

      <table className={styles.table}>
        <thead>
          <tr>
            <th>M√£</th>
            <th>Gi·∫£m</th>
            <th>Th·ªùi h·∫°n</th>
            <th>ƒê√£ d√πng / T·ªëi ƒëa</th>
            <th>T·ªëi thi·ªÉu</th>
            <th>Tr·∫°ng th√°i</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {promotions.map((p) => (
            <tr key={p.id}>
              <td>{p.code}</td>
              <td>{p.discount}%</td>
              <td>{p.validFrom.slice(0, 10)} ‚Üí {p.validTo.slice(0, 10)}</td>
              <td>{p.usedCount}/{p.maxUsage}</td>
              <td>{p.minRideAmount.toLocaleString()}ƒë</td>
              <td>{p.status === 1 ? "‚úÖ" : "‚ùå"}</td>
              <td className={styles.actions}>
                <button className={`${styles.actionBtn} ${styles.editBtn}`} onClick={() => openEditModal(p)}>
                  ‚úèÔ∏è
                </button>
                <button className={`${styles.actionBtn} ${styles.deleteBtn}`} onClick={() => handleDelete(p.id)}>
                  üóë
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Modal th√™m/s·ª≠a */}
      {showModal && (
        <EditPromotionModal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        initialData={form}
        onSubmit={handleSubmit}
      />
      )}
    </div>
  );
}
