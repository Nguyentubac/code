import React, { useEffect, useState } from "react";
import { getUsers, deleteUser } from "../../../services/apiUser";
import { useReactTable, getCoreRowModel, getFilteredRowModel, getSortedRowModel, flexRender } from "@tanstack/react-table";
import styles from "./UserManagement.module.css"; // Import CSS Module
import Action from "./Action"; // Import Action Component
import Swal from "sweetalert2";
export default function UserManagement() {
  const [users, setUsers] = useState([]);
  const [error, setError] = useState("");
  const [globalFilter, setGlobalFilter] = useState("");
  const [selectedUsers, setSelectedUsers] = useState([]); // L∆∞u danh s√°ch user ƒë∆∞·ª£c ch·ªçn
  useEffect(() => {
    fetchUsers();
  }, []);
  error;
  const fetchUsers = async () => {
    try {
      const data = await getUsers();
      setUsers(data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch user:", error);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng.");
    }
  };

  const handleDeleteUsers = async () => {
    if (selectedUsers.length === 0) {
      Swal.fire({
        icon: "warning",
        title: "Ch∆∞a ch·ªçn ng∆∞·ªùi d√πng",
        text: "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a.",
      });
      return;
    }

    const result = await Swal.fire({
      title: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${selectedUsers.length} ng∆∞·ªùi d√πng?`,
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "X√≥a",
      cancelButtonText: "H·ªßy",
      reverseButtons: true, // ƒê·ªïi v·ªã tr√≠ c√°c n√∫t
    });

    if (result.isConfirmed) {
      try {
        await Promise.all(selectedUsers.map((id) => deleteUser(id)));
        setUsers(users.filter((user) => !selectedUsers.includes(user.id)));
        setSelectedUsers([]);

        Swal.fire({
          icon: "success",
          title: "X√≥a th√†nh c√¥ng!",
          text: `${selectedUsers.length} ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a.`,
        });
      } catch (error) {
        console.error("L·ªói khi x√≥a user:", error);
        setError("Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng.");
        Swal.fire({
          icon: "error",
          title: "L·ªói",
          text: "Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng, vui l√≤ng th·ª≠ l·∫°i.",
        });
      }
    }
  };

  const handleSelectUser = (id) => {
    setSelectedUsers((prev) =>
      prev.includes(id) ? prev.filter((userId) => userId !== id) : [...prev, id]
    );
  };

  const handleSelectAll = () => {
    if (selectedUsers.length === users.length) {
      setSelectedUsers([]);
    } else {
      setSelectedUsers(users.map((user) => user.id));
    }
  };



  // C·∫•u tr√∫c c·ªôt cho b·∫£ng
  const columns = [
    {
      id: "select",
      header: () => (
        <input
          type="checkbox"
          checked={selectedUsers.length === users.length && users.length > 0}
          onChange={handleSelectAll}
        />
      ),
      cell: ({ row }) => (
        <input
          type="checkbox"
          checked={selectedUsers.includes(row.original.id)}
          onChange={() => handleSelectUser(row.original.id)}
        />
      ),
    },
    { accessorKey: "id", header: "ID" },
    { accessorKey: "email", header: "Email" },
    { accessorKey: "fullName", header: "H·ªç v√† T√™n" },
    { accessorKey: "gender", header: "Gi·ªõi t√≠nh" },
    { accessorKey: "birthDate", header: "Ng√†y sinh", cell: (info) => { const value = info.getValue(); if (!value) return "Ch∆∞a c√≥"; const date = new Date(value); const day = String(date.getDate()).padStart(2, "0"); const month = String(date.getMonth() + 1).padStart(2, "0"); const year = date.getFullYear(); return `${day}/${month}/${year}`; }, },
    { accessorKey: "phoneNumber", header: "S·ªë ƒëi·ªán tho·∫°i" },
    { accessorKey: "address", header: "ƒê·ªãa ch·ªâ" },
    { accessorKey: "createdAt", header: "Ng√†y t·∫°o", cell: (info) => { const value = info.getValue(); if (!value) return "Ch∆∞a c√≥"; const date = new Date(value); const day = String(date.getDate()).padStart(2, "0"); const month = String(date.getMonth() + 1).padStart(2, "0"); const year = date.getFullYear(); return `${day}/${month}/${year}`; }, },
    { accessorKey: "updatedAt",header: "C·∫≠p nh·∫≠t l√∫c",cell: (info) => new Date(info.getValue()).toLocaleDateString('en-GB')},
    { accessorKey: "isActive",header: "Tr·∫°ng th√°i",cell: (info) => 
      (<span className={info.getValue() ? styles.activeStatus : styles.inactiveStatus}>
          {info.getValue() ? "‚úî Ho·∫°t ƒë·ªông" : "‚ùå Kh√¥ng ho·∫°t ƒë·ªông"}
        </span>
      ),
    },
  ];

  // Kh·ªüi t·∫°o React Table
  const tableInstance = useReactTable({
    data: users,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      globalFilter,
    },
    onGlobalFilterChange: setGlobalFilter,
  });

  return (
    <div>
      <div className={styles.userManagement}>
        {/* Action buttons */}
        <Action
          users={users} // ‚úÖ TRUY·ªÄN users v√†o ƒë·ªÉ t√¨m user theo ID
          refreshUsers={fetchUsers}
          selectedUsers={selectedUsers}
          onDelete={handleDeleteUsers}
        />


        {/* Search bar */}
        <div className={styles.searchContainer}>

          <input
            type="text"
            placeholder="T√¨m ki·∫øm ng∆∞·ªùi d√πng.../id/t√™n/sƒët/email..."
            value={globalFilter}
            onChange={(e) => setGlobalFilter(e.target.value)}
            className={styles.searchInput}
          />
        </div>

        {/* Table */}
        <div className={styles.tableContainer}>
          <table className={styles.excelTable}>
            <thead>
              {tableInstance.getHeaderGroups().map((headerGroup) => (
                <tr key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <th
                      key={header.id}
                      onClick={header.column.getToggleSortingHandler()}
                      className={styles.sortableHeader}
                    >
                      {flexRender(header.column.columnDef.header, header.getContext())}
                      {header.column.getIsSorted()
                        ? header.column.getIsSorted() === "desc"
                          ? " üîΩ"
                          : " üîº"
                        : ""}
                    </th>
                  ))}
                </tr>
              ))}
            </thead>
            <tbody>
              {tableInstance.getRowModel().rows.length > 0 ? (
                tableInstance.getRowModel().rows.map((row) => (
                  <tr
                    key={row.id}
                    className={
                      selectedUsers.includes(row.original.id) ? styles.selectedRow : ""
                    }
                  >
                    {row.getVisibleCells().map((cell) => (
                      <td key={cell.id}>
                        {flexRender(cell.column.columnDef.cell, cell.getContext())}
                      </td>
                    ))}
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="10" className={styles.noData}>
                    Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );


  ;

}
