import React, { useEffect, useState } from "react";
import {
  getRides,
  createRide,
  updateRide,
  deleteRide,
} from "../../../services/apiRide";
import AddRideForm from "./AddRideForm";
import EditRideForm from "./EditRideForm";
import RideAction from "./RideAction";
import styles from "./RideManagement.module.css";
import Swal from 'sweetalert2';
import Modal from "../../Modal/Modal";
import RideStats from "./RideStats";

export default function RideManagement() {
  const [rides, setRides] = useState([]);
  const [selectedRide, setSelectedRide] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);

  const fetchRides = async () => {
    try {
      const data = await getRides();
      setRides(data);
    } catch (error) {
      console.error("L·ªói t·∫£i danh s√°ch chuy·∫øn ƒëi:", error);
    }
  };

  useEffect(() => {
    fetchRides();
  }, []);

  const handleAddRide = async (formData) => {
    try {
      await createRide(formData);
      fetchRides();
      setShowAddForm(false);
    } catch (error) {
      console.error("L·ªói th√™m chuy·∫øn ƒëi:", error);
    }
  };
  const handleCancelRide = async () => {
    if (!selectedRide) return;
    const confirm = await Swal.fire({
      icon: 'warning',
      title: 'B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy chuy·∫øn ƒëi n√†y?',
      showCancelButton: true,
      confirmButtonText: 'H·ªßy chuy·∫øn',
      cancelButtonText: 'Kh√¥ng',
    });

    if (confirm.isConfirmed) {
      try {
        await updateRide(selectedRide.id, {
          ...selectedRide,
          status: 2,
          pickupTime: selectedRide.pickupTime ? new Date(selectedRide.pickupTime).toISOString() : null,
          dropoffTime: selectedRide.dropoffTime ? new Date(selectedRide.dropoffTime).toISOString() : null,
        });

        await fetchRides();
        Swal.fire({
          icon: "success",
          title: "ƒê√£ h·ªßy chuy·∫øn th√†nh c√¥ng!",
        });
        setSelectedRide(null);
      } catch (err) {
        console.error("‚ùå Chi ti·∫øt l·ªói khi h·ªßy chuy·∫øn:", err);
        Swal.fire({
          icon: "error",
          title: "L·ªói khi h·ªßy chuy·∫øn",
          text: err.response?.data?.message || JSON.stringify(err.response?.data) || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.",
        });
      }
    }
  };


  const handleDeleteRide = async () => {
    if (!selectedRide) return;

    const confirm = await Swal.fire({
      icon: 'warning',
      title: 'B·∫°n c√≥ ch·∫Øc mu·ªën xo√° chuy·∫øn ƒëi n√†y?',
      showCancelButton: true,
      confirmButtonText: 'X√≥a',
      cancelButtonText: 'H·ªßy',
    });

    if (confirm.isConfirmed) {
      try {
        const res = await deleteRide(selectedRide.id);

        if (res.status === 204) {
          Swal.fire({
            icon: 'success',
            title: 'Chuy·∫øn ƒëi ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!',
          });

          setRides((prev) => prev.filter((r) => r.id !== selectedRide.id));
          setSelectedRide(null);
        } else {
          console.warn("‚ùó Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ ph·∫£n h·ªìi 204 nh∆∞ mong ƒë·ª£i:", res);
          Swal.fire({
            icon: 'error',
            title: 'Kh√¥ng xo√° ƒë∆∞·ª£c chuy·∫øn ƒëi.',
            text: `M√£ ph·∫£n h·ªìi t·ª´ m√°y ch·ªß: ${res.status}`,
          });
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi g·ªçi deleteRide():", error);

        if (error.response) {
          console.log("üì¶ L·ªói chi ti·∫øt t·ª´ server:", {
            status: error.response.status,
            data: error.response.data,
            headers: error.response.headers,
          });
        }

        Swal.fire({
          icon: 'error',
          title: 'L·ªói khi xo√° chuy·∫øn ƒëi.',
          text: error.response?.data || "ƒê√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi m√°y ch·ªß.",
        });
      }
    }
  };


  const handleSelect = (ride) => {
    setSelectedRide(ride);
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>Qu·∫£n l√Ω chuy·∫øn ƒëi</h2>

      <RideAction
        onAdd={() => setShowAddForm(true)}
        onEdit={() => setShowEditForm(true)}
        onDelete={handleDeleteRide}
        onCancel={handleCancelRide}
        selectedRide={selectedRide}
      />


      {showAddForm && (
        <Modal isOpen={showAddForm} onClose={() => setShowAddForm(false)}>
          <AddRideForm onSubmit={handleAddRide} onCancel={() => setShowAddForm(false)} />
        </Modal>
      )}

      {showEditForm && selectedRide && (
        <EditRideForm
          ride={selectedRide}
          onSubmit={handleAddRide}
          onCancel={() => setShowEditForm(false)}
        />
      )}

      <table className={styles.table}>
        <thead>
          <tr>
            <th>ID</th>
            <th>Route</th>
            <th>Xe</th>
            <th>T√†i x·∫ø</th>
            <th>H√†nh kh√°ch</th>
            <th>ƒêi·ªÉm ƒë√≥n</th>
            <th>ƒêi·ªÉm tr·∫£</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Th·ªùi gian ƒë√≥n</th>
          </tr>
        </thead>
        <tbody>
          {rides.map((ride) => (
            <tr
              key={ride.id}
              onClick={() => handleSelect(ride)}
              className={selectedRide?.id === ride.id ? styles.selectedRow : ""}
            >
              <td>{ride.id}</td>
              <td>{ride.routeTripScheduleId}</td>
              <td>{ride.vehiclePlate} ({ride.vehicleId})</td>
              <td>{ride.driverName} ({ride.driverId})</td>
              <td>{ride.passengerName}</td>
              <td>{ride.pickupLocation}</td>
              <td>{ride.dropoffLocation}</td>
              <td className={
                ride.status === 0 ? styles.statusPending :
                  ride.status === 1 ? styles.statusRunning :
                    ride.status === 2 ? styles.statusCancelled :
                      ride.status === 3 ? styles.statusCompleted : ""
              }>
                {
                  ride.status === 0 ? "Ch∆∞a b·∫Øt ƒë·∫ßu" :
                    ride.status === 1 ? "ƒêang ch·∫°y" :
                      ride.status === 2 ? "ƒê√£ h·ªßy" :
                        ride.status === 3 ? "Ho√†n th√†nh" :
                          "Kh√¥ng r√µ"
                }
              </td>
              <td>{ride.pickupTime}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <RideStats/>
    </div>
  );
}
